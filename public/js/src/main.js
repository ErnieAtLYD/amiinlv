// Generated by CoffeeScript 1.6.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.App = {
    Routers: {},
    Views: {},
    Models: {},
    Collections: {}
  };

  jQuery(function() {
    if ($("#main").length > 0) {
      window.userLocation = new App.Models.Location();
      return window.view = new App.Views.Main();
    }
  });

  /* --------------------------------------------
       Begin location.coffee
  --------------------------------------------
  */


  App.Models.Location = (function(_super) {

    __extends(Location, _super);

    function Location() {
      return Location.__super__.constructor.apply(this, arguments);
    }

    Location.prototype.defaults = {
      latitude: 36.18,
      longitude: -114.14,
      withinLimits: true
    };

    Location.prototype.initialize = function() {
      return this.on("change", this.onChange);
    };

    Location.prototype.url = function() {
      return this.instanceURL;
    };

    Location.prototype.fetchByAddress = function(address) {
      this.instanceURL = "/geocode";
      return this.fetch({
        data: {
          address: address
        }
      });
    };

    Location.prototype.fetchByCurrentLocation = function(position) {
      this.instanceURL = "/check";
      return this.fetch({
        data: {
          latitude: position.coords.latitude,
          longitude: position.coords.longitude
        }
      });
    };

    Location.prototype.getCurrentLocation = function() {
      var geolocator;
      geolocator = window.navigator.geolocation;
      if (geolocator) {
        return geolocator.getCurrentPosition(_.bind(this.fetchByCurrentLocation, this), _.bind(this.onGetCurrentLocationFailure, this));
      } else {
        return console.log("Browser does not support geolocation");
      }
    };

    Location.prototype.onGetCurrentLocationFailure = function(error) {
      return this.trigger("currentlocation:failure");
    };

    Location.prototype.onChange = function() {
      if (this.get("withinLimits")) {
        return this.trigger("location:withinlimits");
      } else {
        return this.trigger("location:outsidelimits");
      }
    };

    Location.prototype.reset = function() {
      return this.set(this.defaults);
    };

    return Location;

  })(Backbone.Model);

  /* --------------------------------------------
       Begin main.coffee
  --------------------------------------------
  */


  App.Views.Main = (function(_super) {

    __extends(Main, _super);

    function Main() {
      return Main.__super__.constructor.apply(this, arguments);
    }

    Main.prototype.el = "#main";

    Main.prototype.initialize = function() {
      this.map = new App.Views.Map;
      this.question = new App.Views.Question;
      this.answer = new App.Views.Answer;
      this.$header = $(this.header);
      userLocation.on("location:withinlimits", _.bind(this.onWithinLimits, this));
      userLocation.on("location:outsidelimits", _.bind(this.onOutsideLimits, this));
      return $("#input-location").focus();
    };

    Main.prototype.onWithinLimits = function() {
      return this.displayAnswer("Yes");
    };

    Main.prototype.onOutsideLimits = function() {
      return this.displayAnswer("No");
    };

    Main.prototype.displayAnswer = function(answer) {
      this.question.hide(_.bind((function() {
        return this.answer.show(answer);
      }), this));
      return this.map.refreshLocation();
    };

    $(document).keydown(function(e) {
      if (e.which === 27 && e.ctrlKey === false && e.metaKey === false) {
        this.answer.hide();
        this.question.show();
        return this.map.resetLocation();
      }
    });

    return Main;

  })(Backbone.View);

  /* --------------------------------------------
       Begin map.coffee
  --------------------------------------------
  */


  App.Views.Map = (function(_super) {

    __extends(Map, _super);

    function Map() {
      return Map.__super__.constructor.apply(this, arguments);
    }

    Map.prototype.el = "#map";

    Map.prototype.origin = {
      latitude: 36.18,
      longitude: -115.14
    };

    Map.prototype.tilesURL = "https://maps.nlp.nokia.com/maptiler/v2/maptile/newest/normal.day/{z}/{x}/{y}/256/png8?lg=eng&token=61YWYROufLu_f8ylE0vn0Q&app_id=qIWDkliFCtLntLma2e6O";

    Map.prototype.attribution = "CartoDB <a href='http://cartodb.com/attributions'>attribution</a>, &copy;2012 Nokia <a href='http://here.net/services/terms'>Terms of use</a>";

    Map.prototype.zoom = 12;

    Map.prototype.setZoom = 14;

    Map.prototype.initialize = function() {
      var cartoAttributes, cartoLayer, center, mapAttributes, tileAttributes, tileLayer;
      center = new L.LatLng(this.origin.latitude, this.origin.longitude);
      mapAttributes = {
        center: center,
        zoom: this.zoom,
        dragging: false,
        touchZoom: false,
        scrollWheelZoom: false,
        doubleClickZoom: false,
        boxZoom: false,
        keyboard: false,
        zoomControl: false
      };
      this.map = L.map("map", mapAttributes);
      tileAttributes = {
        attribution: this.attribution,
        maxZoom: 15
      };
      tileLayer = new L.TileLayer(this.tilesURL, tileAttributes);
      this.map.addLayer(tileLayer);
      cartoAttributes = {
        map: this.map,
        user_name: "cfa",
        table_name: "clv_boundary",
        query: "SELECT * FROM {{table_name}}",
        tile_style: "\#{{table_name}}{ polygon-fill: #F11; polygon-opacity: 0.1; line-width: 2; line-color: #F99; line-opacity: 1; line-dasharray: 3,4; polygon-comp-op: multiply;}"
      };
      cartoLayer = new L.CartoDBLayer(cartoAttributes);
      return this.map.addLayer(cartoLayer);
    };

    Map.prototype.refreshLocation = function() {
      var latitude, location, longitude;
      latitude = userLocation.get("latitude");
      longitude = userLocation.get("longitude");
      location = new L.LatLng(latitude, longitude);
      return this.map.setView(location, this.setZoom);
    };

    Map.prototype.resetLocation = function() {
      var center;
      center = new L.LatLng(this.origin.latitude, this.origin.longitude);
      return this.map.setView(center, this.zoom);
    };

    Map.prototype.createMap = function(data) {
      var center, tileset;
      tileset = data.layers[0].options.urlTemplate;
      center = new L.LatLng(this.origin.latitude, this.origin.longitude);
      return this.map = new L.map("map", cartodb.createLayer(this.map, this.endpoint).done(function(layer) {
        return "";
      }).on("error", function(err) {
        return console.log("The following error occurred: " + err);
      }));
    };

    return Map;

  })(Backbone.View);

  /* --------------------------------------------
       Begin question.coffee
  --------------------------------------------
  */


  App.Views.Question = (function(_super) {

    __extends(Question, _super);

    function Question() {
      return Question.__super__.constructor.apply(this, arguments);
    }

    Question.prototype.el = "#question";

    Question.prototype.input = "#input-location";

    Question.prototype.events = {
      "click #input-target": "onGetLocation",
      "click #input-go": "onGo",
      "submit form": "onSubmit"
    };

    Question.prototype.onGetLocation = function() {
      console.log("get location");
      return userLocation.getCurrentLocation();
    };

    Question.prototype.onGo = function() {
      this.setLocation();
      return false;
    };

    Question.prototype.onSubmit = function(e) {
      e.preventDefault();
      this.setLocation();
      return false;
    };

    Question.prototype.setLocation = function() {
      var address;
      address = $(this.input).val();
      return userLocation.fetchByAddress(address);
    };

    Question.prototype.hide = function(callback) {
      return this.$el.fadeOut(250, callback);
    };

    Question.prototype.show = function() {
      return this.$el.fadeIn(150);
    };

    return Question;

  })(Backbone.View);

  /* --------------------------------------------
       Begin answer.coffee
  --------------------------------------------
  */


  App.Views.Answer = (function(_super) {

    __extends(Answer, _super);

    function Answer() {
      return Answer.__super__.constructor.apply(this, arguments);
    }

    Answer.prototype.el = "#answer";

    Answer.prototype.marker = "#marker";

    Answer.prototype.initialize = function() {
      return this.$marker = $(this.marker);
    };

    Answer.prototype.show = function(answer) {
      this.$el.html(ich.answer({
        answer: answer
      }));
      this.$marker.css("display", "block");
      this.$marker.animate({
        opacity: 1,
        top: "250"
      }, 250);
      return this.$el.fadeIn(250);
    };

    Answer.prototype.hide = function() {
      this.$marker.animate({
        opacity: 0,
        top: "0"
      }, 0);
      return this.$el.fadeOut(150);
    };

    Answer.prototype.drop = function() {
      return $(this.marker).animate({
        opacity: 0
      }, 0);
    };

    return Answer;

  })(Backbone.View);

}).call(this);
